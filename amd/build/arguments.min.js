define("tiny_filtercodes/arguments",["exports","core/templates","core/str","core/modal_save_cancel","core/modal_events","./common","./ajax"],(function(_exports,_templates,_str,_modal_save_cancel,_modal_events,_common,_ajax){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Argument modal for the Moodle tiny_filtercodes plugin.
   *
   * @module     tiny_filtercodes
   * @author      Leon Camus
   * @copyright   2025 onwards Leon Camus
   * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.openArgumentModal=void 0,_templates=_interopRequireDefault(_templates),_modal_save_cancel=_interopRequireDefault(_modal_save_cancel),_modal_events=_interopRequireDefault(_modal_events);const renderGroupIdNumber=async function(argid,currentArg){let multiple=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const courseid=M.cfg.courseId;if((0,_common.isNull)(courseid))throw new Error("Course ID is not found");const groups=await(0,_ajax.getCourseGroupsData)(courseid);if((0,_common.isNull)(groups)||0===groups.length)throw new Error("No groups found in the course");return await _templates.default.renderForPromise("tiny_filtercodes/autocomplete",{name:argid,id:argid,options:groups.map((group=>({value:group.idnumber||"".concat(group.id),text:group.name,selected:group.idnumber===currentArg||"".concat(group.id)===currentArg}))),multiple:multiple,ajax:null,tags:!1,casesensitive:!1,showsuggestions:!0})},renderGroupingIdNumber=async function(argid,currentArg){let multiple=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const courseid=M.cfg.courseId;if((0,_common.isNull)(courseid))throw new Error("Course ID is not found");const groupings=await(0,_ajax.getCourseGroupingsData)(courseid);if((0,_common.isNull)(groupings)||0===groupings.length)throw new Error("No groups found in the course");return await _templates.default.renderForPromise("tiny_filtercodes/autocomplete",{name:argid,id:argid,options:groupings.map((grouping=>({value:grouping.idnumber||"".concat(grouping.id),text:grouping.name,selected:grouping.idnumber===currentArg||"".concat(grouping.id)===currentArg}))),multiple:multiple,ajax:null,tags:!1,casesensitive:!1,showsuggestions:!0})},renderCourseId=async function(argid,currentArg){let multiple=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const courses=await(0,_ajax.getCoursesData)();if((0,_common.isNull)(courses)||0===courses.length)throw new Error("No courses found");return await _templates.default.renderForPromise("tiny_filtercodes/autocomplete",{name:argid,id:argid,options:courses.map((course=>({value:course.idnumber||"".concat(course.id),text:course.displayname,selected:course.idnumber===currentArg||"".concat(course.id)===currentArg}))),multiple:multiple,ajax:null,tags:!1,casesensitive:!1,showsuggestions:!0})},renderCategoryId=async function(argid,currentArg){let multiple=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const categories=await(0,_ajax.getCategoriesData)();if((0,_common.isNull)(categories)||0===categories.length)throw new Error("No courses found");return await _templates.default.renderForPromise("tiny_filtercodes/autocomplete",{name:argid,id:argid,options:categories.map((category=>({value:category.idnumber||"".concat(category.id),text:category.name,selected:category.idnumber===currentArg||"".concat(category.id)===currentArg}))),multiple:multiple,ajax:null,tags:!1,casesensitive:!1,showsuggestions:!0})},renderSelect=async function(argid,currentArg,values){let allowCustom=arguments.length>3&&void 0!==arguments[3]&&arguments[3],multiple=arguments.length>4&&void 0!==arguments[4]&&arguments[4],empty=arguments.length>5&&void 0!==arguments[5]&&arguments[5];empty&&(values=[{langkey:"empty",value:""},...values]);const langKeys=await(0,_str.getStrings)(values.map((value=>({key:"filtercodes:argument:value:".concat(void 0===value.langkey?value:value.langkey),component:_common.component}))));return allowCustom||multiple?await _templates.default.renderForPromise("tiny_filtercodes/autocomplete",{name:argid,id:argid,options:values.map(((value,i)=>({value:void 0===value.value?value:value.value,text:langKeys[i],selected:(void 0===value.value?value:value.value)===currentArg}))),multiple:multiple,ajax:null,tags:!1,casesensitive:!1,showsuggestions:!0}):await _templates.default.renderForPromise("tiny_filtercodes/select",{name:argid,id:argid,options:values.map(((value,i)=>({value:void 0===value.value?value:value.value,text:langKeys[i],selected:(void 0===value.value?value:value.value)===currentArg})))})},renderText=async function(argid,currentArg,placeholder){return await _templates.default.renderForPromise("tiny_filtercodes/text",{name:argid,id:argid,value:currentArg,placeholder:placeholder})};_exports.openArgumentModal=async function(key,currentArgs){const filtercode=_common.filtercodeMap[key];if((0,_common.isNull)(filtercode))return null;const data={args:[]},postfix=Array(32).fill(0).map((()=>Math.floor(16*Math.random()).toString(16))).join("");for(let i=0;i<filtercode.args.length;i++){const argid="arg".concat(i,"-").concat(postfix),arg=filtercode.args[i];if(arg instanceof _common.SelectArg){let currentArg=currentArgs[0];arg.multiple?currentArg=currentArgs.join(","):currentArgs=currentArgs.splice(1),data.args.push((async()=>({id:argid,label:await(0,_str.getString)("filtercodes:argument:".concat(arg.id),_common.component),...await renderSelect(argid,currentArg,arg.values,arg.allowCustom,arg.multiple,arg.empty)}))());continue}if(arg instanceof _common.QuotedTextArg){let currentArg="";if(!(0,_common.isNull)(currentArgs[0])){if(!currentArgs[0].startsWith('"'))throw new Error("Quoted text argument must start with a double quote");let j=0;for(;j<currentArgs.length&&!currentArgs[j].endsWith('"');)j++;if(j===currentArgs.length)throw new Error("Quoted text argument must end with a double quote");currentArg=currentArgs.splice(0,j+1).join(" "),currentArgs=currentArgs.splice(j),currentArg=currentArg.substring(1,currentArg.length-1)}data.args.push((async()=>({id:argid,label:await(0,_str.getString)("filtercodes:argument:".concat(arg.id),_common.component),...await renderText(argid,currentArg,arg.placeholder)}))());continue}if(arg instanceof _common.TextArg){const currentArg=currentArgs.join(",");data.args.push((async()=>({id:argid,label:await(0,_str.getString)("filtercodes:argument:".concat(arg.id),_common.component),...await renderText(argid,currentArg,arg.placeholder)}))());continue}const multiple=arg.endsWith("+")||arg.endsWith("*"),empty=arg.endsWith("*")||arg.endsWith("?");if(i<filtercode.args.length-1&&(empty||multiple))throw new Error("Empty or multiple arguments are only allowed as the last argument");let currentArg=currentArgs[0];multiple?currentArg=currentArgs.splice(i).join(","):currentArgs=currentArgs.splice(1),arg.startsWith("groupidnumber")?data.args.push((async()=>({id:argid,multiple:multiple,empty:empty,label:await(0,_str.getString)("filtercodes:argument:groupidnumber".concat(multiple?"s":""),_common.component),...await renderGroupIdNumber(argid,currentArg,multiple)}))()):arg.startsWith("groupingidnumber")?data.args.push((async()=>({id:argid,multiple:multiple,empty:empty,label:await(0,_str.getString)("filtercodes:argument:groupingidnumber".concat(multiple?"s":""),_common.component),...await renderGroupingIdNumber(argid,currentArg,multiple)}))()):arg.startsWith("courseid")?data.args.push((async()=>({id:argid,multiple:multiple,empty:empty,label:await(0,_str.getString)("filtercodes:argument:courseid".concat(multiple?"s":""),_common.component),...await renderCourseId(argid,currentArg,multiple)}))()):arg.startsWith("categoryid")?data.args.push((async()=>({id:argid,multiple:multiple,empty:empty,label:await(0,_str.getString)("filtercodes:argument:categoryid".concat(multiple?"s":""),_common.component),...await renderCategoryId(argid,currentArg,multiple)}))()):data.args.push((async()=>({id:argid,multiple:multiple,empty:empty,label:"Unknown argument type",value:"<span>Unknown argument type</span>",js:""}))())}const[args,[title,description]]=await Promise.all([Promise.all(data.args),(0,_str.getStrings)([{key:"filtercodes:argumentmodal:title",component:_common.component,param:key},filtercode.getDescriptionStringRequest()])]);data.args=args,data.description=description;const modal=await _modal_save_cancel.default.create({title:title,body:_templates.default.render("tiny_filtercodes/argumentmodal",data),large:!0,show:!0});return modal.getRoot().on(_modal_events.default.bodyRendered,(()=>{data.args.forEach((arg=>{arg.js&&_templates.default.runTemplateJS(arg.js)}))})),await new Promise((resolve=>{modal.getRoot().on(_modal_events.default.save,(()=>{const values=[];let empty=!1;data.args.forEach(((arg,i)=>{const val=modal.getRoot().find("#".concat(arg.id)).val();if(filtercode.args[i]instanceof _common.QuotedTextArg)values.push('"'.concat(val,'"'));else if(""!==val){if(empty)throw new Error("Cannot have non-empty arguments after an empty argument");val instanceof Array&&arg.multiple?values.push(...val):values.push(val)}else empty=!0})),resolve(values)})),modal.getRoot().on(_modal_events.default.cancel,(()=>{resolve(null)}))}))}}));

//# sourceMappingURL=arguments.min.js.map