{"version":3,"file":"arguments.min.js","sources":["../src/arguments.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Argument modal for the Moodle tiny_filtercodes plugin.\n *\n * @module     tiny_filtercodes\n * @author      Leon Camus\n * @copyright   2025 onwards Leon Camus\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from \"core/templates\";\nimport {getString, getStrings} from \"core/str\";\nimport ModalSaveCancel from \"core/modal_save_cancel\";\nimport ModalEvents from \"core/modal_events\";\nimport {component, filtercodeMap, isNull, QuotedTextArg, SelectArg, TextArg} from \"./common\";\nimport {getCategoriesData, getCourseGroupingsData, getCourseGroupsData, getCoursesData} from \"./ajax\";\n\n/**\n * @param {string} argid\n * @param {string} currentArg\n * @param {boolean} multiple\n * @return {Promise<{html: string, js: string}>}\n */\nconst renderGroupIdNumber = async function(argid, currentArg, multiple = false) {\n    // Get Current Course ID\n    const courseid = M.cfg.courseId;\n    if (isNull(courseid)) {\n        throw new Error('Course ID is not found');\n    }\n    // Fetch all groups in the course\n    const groups = await getCourseGroupsData(courseid);\n    if (isNull(groups) || groups.length === 0) {\n        throw new Error('No groups found in the course');\n    }\n    // Render the select.\n    return await Templates.renderForPromise('tiny_filtercodes/autocomplete', {\n        name: argid,\n        id: argid,\n        options: groups.map((group) => {\n            return {\n                value: group.idnumber || `${group.id}`,\n                text: group.name,\n                selected: group.idnumber === currentArg || `${group.id}` === currentArg,\n            };\n        }),\n        multiple,\n        ajax: null,\n        tags: false,\n        casesensitive: false,\n        showsuggestions: true,\n    });\n};\n\n/**\n * @param {string} argid\n * @param {string} currentArg\n * @param {boolean} multiple\n * @return {Promise<{html: string, js: string}>}\n */\nconst renderGroupingIdNumber = async function(argid, currentArg, multiple = false) {\n    // Get Current Course ID\n    const courseid = M.cfg.courseId;\n    if (isNull(courseid)) {\n        throw new Error('Course ID is not found');\n    }\n    // Fetch all groups in the course\n    const groupings = await getCourseGroupingsData(courseid);\n    if (isNull(groupings) || groupings.length === 0) {\n        throw new Error('No groups found in the course');\n    }\n    // Render the select.\n    return await Templates.renderForPromise('tiny_filtercodes/autocomplete', {\n        name: argid,\n        id: argid,\n        options: groupings.map((grouping) => {\n            return {\n                value: grouping.idnumber || `${grouping.id}`,\n                text: grouping.name,\n                selected: grouping.idnumber === currentArg || `${grouping.id}` === currentArg,\n            };\n        }),\n        multiple,\n        ajax: null,\n        tags: false,\n        casesensitive: false,\n        showsuggestions: true,\n    });\n};\n\n/**\n * @param {string} argid\n * @param {string} currentArg\n * @param {boolean} multiple\n * @return {Promise<{html: string, js: string}>}\n */\nconst renderCourseId = async function(argid, currentArg, multiple = false) {\n    // Fetch all groups in the course\n    const courses = await getCoursesData();\n    if (isNull(courses) || courses.length === 0) {\n        throw new Error('No courses found');\n    }\n    // Render the select.\n    return await Templates.renderForPromise('tiny_filtercodes/autocomplete', {\n        name: argid,\n        id: argid,\n        options: courses.map((course) => {\n            return {\n                value: course.idnumber || `${course.id}`,\n                text: course.displayname,\n                selected: course.idnumber === currentArg || `${course.id}` === currentArg,\n            };\n        }),\n        multiple,\n        ajax: null, // TODO: Implement AJAX\n        tags: false,\n        casesensitive: false,\n        showsuggestions: true,\n    });\n};\n\n/**\n * @param {string} argid\n * @param {string} currentArg\n * @param {boolean} multiple\n * @return {Promise<{html: string, js: string}>}\n */\nconst renderCategoryId = async function(argid, currentArg, multiple = false) {\n    // Fetch all groups in the course\n    const categories = await getCategoriesData();\n    if (isNull(categories) || categories.length === 0) {\n        throw new Error('No courses found');\n    }\n    // Render the select.\n    return await Templates.renderForPromise('tiny_filtercodes/autocomplete', {\n        name: argid,\n        id: argid,\n        options: categories.map((category) => {\n            return {\n                value: category.idnumber || `${category.id}`,\n                text: category.name,\n                selected: category.idnumber === currentArg || `${category.id}` === currentArg,\n            };\n        }),\n        multiple,\n        ajax: null, // TODO: Implement AJAX\n        tags: false,\n        casesensitive: false,\n        showsuggestions: true,\n    });\n};\n\n/**\n * @param {string} argid\n * @param {string} currentArg\n * @param {({langkey: string, value: string}|string)[]} values\n * @param {boolean} allowCustom\n * @param {boolean} multiple\n * @param {boolean} empty\n * @return {Promise<{html: string, js: string}>}\n */\nconst renderSelect = async function(argid, currentArg, values, allowCustom = false, multiple = false, empty = false) {\n    if (empty) {\n        // Prepend an empty value.\n        values = [\n            {\n                langkey: 'empty',\n                value: '',\n            },\n            ...values,\n        ];\n    }\n    const langKeys = await getStrings(values.map((value) => ({\n        key: `filtercodes:argument:value:${value.langkey === undefined ? value : value.langkey}`,\n        component,\n    })));\n    if (allowCustom || multiple) {\n        // TODO ALLOW CUSTOM\n        return await Templates.renderForPromise('tiny_filtercodes/autocomplete', {\n            name: argid,\n            id: argid,\n            options: values.map((value, i) => {\n                return {\n                    value: value.value === undefined ? value : value.value,\n                    text: langKeys[i],\n                    selected: (value.value === undefined ? value : value.value) === currentArg,\n                };\n            }),\n            multiple,\n            ajax: null,\n            tags: false,\n            casesensitive: false,\n            showsuggestions: true,\n        });\n    }\n\n    return await Templates.renderForPromise('tiny_filtercodes/select', {\n        name: argid,\n        id: argid,\n        options: values.map((value, i) => {\n            return {\n                value: value.value === undefined ? value : value.value,\n                text: langKeys[i],\n                selected: (value.value === undefined ? value : value.value) === currentArg,\n            };\n        }),\n    });\n};\n\n/**\n * @param {string} argid\n * @param {string} currentArg\n * @param {string} placeholder\n * @return {Promise<{html: string, js: string}>}\n */\nconst renderText = async function(argid, currentArg, placeholder) {\n    return await Templates.renderForPromise('tiny_filtercodes/text', {\n        name: argid,\n        id: argid,\n        value: currentArg,\n        placeholder,\n    });\n};\n\n/**\n * @param {string} key\n * @param {(string|null)[]} currentArgs\n * @return {Promise<string[]|null>}\n */\nexport const openArgumentModal = async function(key, currentArgs) {\n    const filtercode = filtercodeMap[key];\n    if (isNull(filtercode)) {\n        return null;\n    }\n    const data = {\n        args: [],\n    };\n    // Generate a random postfix for the argument ids.\n    const postfix = Array(32).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('');\n    for (let i = 0; i < filtercode.args.length; i++) {\n        const argid = `arg${i}-${postfix}`;\n        const arg = filtercode.args[i];\n        if (arg instanceof SelectArg) {\n            let currentArg = currentArgs[0];\n            if (arg.multiple) {\n                currentArg = currentArgs.join(',');\n            } else {\n                currentArgs = currentArgs.splice(1);\n            }\n            data.args.push((async() => ({\n                id: argid,\n                label: await getString(`filtercodes:argument:${arg.id}`, component),\n                ...await renderSelect(argid, currentArg, arg.values, arg.allowCustom, arg.multiple, arg.empty),\n            }))());\n            continue;\n        }\n        if (arg instanceof QuotedTextArg) {\n            let currentArg = '';\n            if (!isNull(currentArgs[0])) {\n                if (!currentArgs[0].startsWith('\"')) {\n                    throw new Error('Quoted text argument must start with a double quote');\n                } else {\n                    let j = 0;\n                    while (j < currentArgs.length && !currentArgs[j].endsWith('\"')) {\n                        j++;\n                    }\n                    if (j === currentArgs.length) {\n                        throw new Error('Quoted text argument must end with a double quote');\n                    }\n                    currentArg = currentArgs.splice(0, j + 1).join(' ');\n                    currentArgs = currentArgs.splice(j);\n                    // Remove the quotes.\n                    currentArg = currentArg.substring(1, currentArg.length - 1);\n                }\n            }\n            data.args.push((async() => ({\n                id: argid,\n                label: await getString(`filtercodes:argument:${arg.id}`, component),\n                ...await renderText(argid, currentArg, arg.placeholder),\n            }))());\n            continue;\n        }\n        if (arg instanceof TextArg) {\n            const currentArg = currentArgs.join(',');\n            data.args.push((async() => ({\n                id: argid,\n                label: await getString(`filtercodes:argument:${arg.id}`, component),\n                ...await renderText(argid, currentArg, arg.placeholder),\n            }))());\n            continue;\n        }\n        const multiple = arg.endsWith('+') || arg.endsWith('*');\n        const empty = arg.endsWith('*') || arg.endsWith('?');\n        // Fail if the argument is empty or multiple and not the last argument.\n        if (i < filtercode.args.length - 1 && (empty || multiple)) {\n            throw new Error('Empty or multiple arguments are only allowed as the last argument');\n        }\n        let currentArg = currentArgs[0];\n        if (multiple) {\n            currentArg = currentArgs.splice(i).join(',');\n        } else {\n            currentArgs = currentArgs.splice(1);\n        }\n        if (arg.startsWith('groupidnumber')) {\n            data.args.push((async() => ({\n                id: argid,\n                multiple,\n                empty,\n                label: await getString(`filtercodes:argument:groupidnumber${multiple ? 's' : ''}`, component),\n                ...await renderGroupIdNumber(argid, currentArg, multiple),\n            }))());\n            continue;\n        }\n        if (arg.startsWith('groupingidnumber')) {\n            data.args.push((async() => ({\n                id: argid,\n                multiple,\n                empty,\n                label: await getString(`filtercodes:argument:groupingidnumber${multiple ? 's' : ''}`, component),\n                ...await renderGroupingIdNumber(argid, currentArg, multiple),\n            }))());\n            continue;\n        }\n        if (arg.startsWith('courseid')) {\n            data.args.push((async() => ({\n                id: argid,\n                multiple,\n                empty,\n                label: await getString(`filtercodes:argument:courseid${multiple ? 's' : ''}`, component),\n                ...await renderCourseId(argid, currentArg, multiple),\n            }))());\n            continue;\n        }\n        if (arg.startsWith('categoryid')) {\n            data.args.push((async() => ({\n                id: argid,\n                multiple,\n                empty,\n                label: await getString(`filtercodes:argument:categoryid${multiple ? 's' : ''}`, component),\n                ...await renderCategoryId(argid, currentArg, multiple),\n            }))());\n            continue;\n        }\n\n        data.args.push((async() => ({\n            id: argid,\n            multiple,\n            empty,\n            label: 'Unknown argument type',\n            value: '<span>Unknown argument type</span>',\n            js: '',\n        }))());\n    }\n    // Await all async functions at once.\n    const [args, [title, description]] = await Promise.all([\n        Promise.all(data.args),\n        getStrings([\n            {key: `filtercodes:argumentmodal:title`, component, param: key},\n            filtercode.getDescriptionStringRequest(),\n        ]),\n    ]);\n    data.args = args;\n    data.description = description;\n\n    const modal = await ModalSaveCancel.create({\n        title,\n        body: Templates.render('tiny_filtercodes/argumentmodal', data),\n        large: true,\n        show: true,\n    });\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\n        data.args.forEach((arg) => {\n            if (arg.js) {\n                Templates.runTemplateJS(arg.js);\n            }\n        });\n    });\n\n    return await (new Promise((resolve) => {\n        modal.getRoot().on(ModalEvents.save, () => {\n            const values = [];\n            let empty = false;\n            data.args.forEach((arg, i) => {\n                const val = modal.getRoot().find(`#${arg.id}`).val();\n                if (filtercode.args[i] instanceof QuotedTextArg) {\n                    values.push(`\"${val}\"`);\n                    return;\n                }\n                if (val === '') {\n                    empty = true;\n                    return;\n                }\n                if (empty) {\n                    throw new Error('Cannot have non-empty arguments after an empty argument');\n                }\n                if (val instanceof Array && arg.multiple) {\n                    values.push(...val);\n                    return;\n                }\n                values.push(val);\n            });\n            resolve(values);\n        });\n        modal.getRoot().on(ModalEvents.cancel, () => {\n            resolve(null);\n        });\n    }));\n};\n"],"names":["renderGroupIdNumber","async","argid","currentArg","multiple","courseid","M","cfg","courseId","Error","groups","length","Templates","renderForPromise","name","id","options","map","group","value","idnumber","text","selected","ajax","tags","casesensitive","showsuggestions","renderGroupingIdNumber","groupings","grouping","renderCourseId","courses","course","displayname","renderCategoryId","categories","category","renderSelect","values","allowCustom","empty","langkey","langKeys","key","undefined","component","i","renderText","placeholder","currentArgs","filtercode","filtercodeMap","data","args","postfix","Array","fill","Math","floor","random","toString","join","arg","SelectArg","splice","push","label","QuotedTextArg","startsWith","j","endsWith","substring","TextArg","js","title","description","Promise","all","param","getDescriptionStringRequest","modal","ModalSaveCancel","create","body","render","large","show","getRoot","on","ModalEvents","bodyRendered","forEach","runTemplateJS","resolve","save","val","find","cancel"],"mappings":"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"}